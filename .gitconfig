[core]
  editor = vi
  pager = "diff-so-fancy | less --tabs=4 -RFX"
[user]
  name = hbkse
  email = hbkse@users.noreply.github.com
[includeIf "gitdir:~/dev/"] # add directory specific git user config, if commiting under different emails
  path = ~/dev/.gitconfig
[interactive]
  diffFilter = "diff-so-fancy --patch"
[color]
  ui = auto
[color "diff-highlight"]
  oldNormal = "red bold"
  oldHighlight = "red bold 52"
  newNormal = "green bold"
  newHighlight = "green bold 22"
[color "diff"]
  meta = "11"
  frag = "magenta bold"
  func = "146 bold"
  commit = "yellow bold"
  old = "red bold"
  new = "green bold"
  whitespace = "red reverse"
[github]
  user = hbkse
[help]
  autocorrect = 1
[url "git@github.com:"]
	insteadOf = https://github.com/
	pushInsteadOf = https://github.com/
[alias]
  undo = reset --soft HEAD^
  diffl = diff HEAD~1
  diffc = diff --cached
  # create new feature branch under dev/georgeweng/*
  # smart checkout: if branch exists, switch; otherwise create it
  ck  = "!f() {                                            \
             tgt=dev/georgeweng/$1;                         \
             if git show-ref --verify --quiet refs/heads/$tgt; then \
               git checkout $tgt;                           \
             else                                           \
               git checkout -b $tgt;                        \
             fi;                                            \
           }; f"
  # add → commit → push
  slop = "!f() {                                            \
              git add -A || exit;                           \
              msg=\"$*\";                                   \
              git commit -m \"$msg\" && git push;           \
          }; f"
  
  # rebase current branch onto latest main/master (LLM generated, hope it works!)
  rema = "!f() {                                                      \
             cur=$(git symbolic-ref --quiet --short HEAD);            \
             # figure out the repo’s primary branch:                  \
             base=$(git symbolic-ref --quiet refs/remotes/origin/HEAD \
                     2>/dev/null | sed 's@^refs/remotes/origin/@@');   \
             [ -z \"$base\" ] && {                                    \
                 git show-ref --verify --quiet refs/heads/main &&     \
                 base=main || base=master;                            \
             };                                                       \
             git checkout \"$base\" && git pull --ff-only &&          \
             git checkout \"$cur\"  && git rebase \"$base\";          \
           }; f"
  
  # hard-reset untracked & ignored cruft like build artifacts
  nuke = clean -xdf
